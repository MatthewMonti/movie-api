const mongoose=require("mongoose"),Models=require("./models.js"),Movies=Models.Movie,Users=Models.User;mongoose.connect(process.env.URL_ATLAS,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>console.log("Mongoose Connected")).catch(e=>{console.error(e)});const express=require("express"),bodyParser=require("body-parser"),morgan=require("morgan");uuid=require("uuid"),fs=require("fs"),path=require("path");const app=express();app.use(morgan("common")),app.use(express.json()),app.use(express.urlencoded({extended:!0}));let cors=require("cors"),allowedOrigins=["https://movies-flex-6e317721b427.herokuapp.com"];const{check:e,validationResult:s}=require("express-validator");app.use(cors({origin:(e,s)=>e&&-1===allowedOrigins.indexOf(e)?s(Error("The CORS policy for this application doesnâ€™t allow access from origin "+e),!1):s(null,!0)}));let auth=require("./auth.js")(app);const passport=require("passport"),{isArray:a}=require("lodash"),{ObjectId:t}=require("mongodb");require("./passport.js");const accessLogStream=fs.createWriteStream(path.join(__dirname,"log.txt"),{flags:"a"});app.use(morgan("combined",{stream:accessLogStream})),app.get("/",async(e,s)=>{s.status(200).send("Welcome to myFlix Movie Database"),e.responseText+="<small>Requested at: "+e.requestTime+"</small>"}),app.get("/api/about",async(e,s)=>{s.status(200).sendFile("./public/doc.html",{root:__dirname}),e.responseText+="<small>Requested at: "+e.requestTime+"</small>"}),app.get("/api/movies",passport.authenticate("jwt",{session:!1}),async(e,s)=>{await Movies.find().then(e=>{s.status(201).json(e)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/title/:label",passport.authenticate("jwt",{session:!1}),async(e,s)=>{await Movies.find({Title:e.params.label}).then(a=>{0==a.length?s.status(400).send(e.params.label+" movie title not in database."):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/release/:year",async(e,s)=>{await Movies.find({Release:e.params.year}).then(a=>{0==a.length?s.status(400).send(e.params.year+" film year does not have any movies yet or invalid year"):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/rated/:audience",async(e,s)=>{await Movies.find({Rated:e.params.audience}).then(a=>{0==a.length?s.status(400).send(e.params.audience+" demographic is either not serviced by database or is invalid entry."):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/rating/:percentage",async(e,s)=>{await Movies.find({Rating:e.params.percentage}).then(a=>{0==a.length?s.status(400).send(e.params.percentage+" rotten tomatoes percentage is either a rating that is yet to match a film in our database or invalid percentage outside the range of (0-100)"):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/genre/:genreName",async(e,s)=>{await Movies.find({"Genre.Name":e.params.genreName}).then(a=>{0==a.length?s.status(400).send(e.params.genreName+" category not in our database sorry we consider more additions in the future."):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.get("/api/movies/director/:name",async(e,s)=>{Movies.find({"Director.Name":e.params.name}).then(a=>{0==a.length?s.status(400).send(e.params.name+" is a director not yet added to database please try someone else."):s.status(200).json(a)}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.post("/api/user",[e("Username","Username is required at least 5 letters").isLength({min:5}),e("Username","Username contains non alphanumeric characters - not allowed.").isAlphanumeric(),e("Password","Password is required").not().isEmpty(),e("Email","Email does not appear to be valid").isEmail()],async(e,a)=>{let t=s(e);if(!t.isEmpty())return a.status(422).json({errors:t.array()});let r=Users.hashPassword(e.body.Password);await Users.findOne({Username:e.body.Username}).then(s=>{if(s)return a.status(400).send(e.body.Username+" user is already in our records please try another user");Users.create({Username:e.body.Username,Password:r,Email:e.body.Email,Birthday:e.body.Birthday}).then(e=>{a.status(201).json(e)}).catch(e=>{console.error(e),a.status(500).send("Error: "+e)})}).catch(e=>{console.error(e),a.status(500).send("Error: "+e)})}),app.put("/api/user/:identity",[e("Username","Username is required").isLength({min:5}),e("Username","Username contains non alphanumeric characters - not allowed.").isAlphanumeric(),e("Password","Password is required").not().isEmpty(),e("Email","Email does not appear to be valid").isEmail()],passport.authenticate("jwt",{session:!1}),async(e,a)=>{let t=s(e);return t.isEmpty()?e.user.id!==e.params.identity?a.status(400).send("Permission denied"):void await Users.findByIdAndUpdate({_id:e.params.identity},{$set:{Username:e.body.Username,Password:Users.hashPassword(e.body.Password),Email:e.body.Email,Birthday:e.body.Birthday}},{new:!0}).then(e=>{a.json(e)}).catch(e=>{console.error(e),a.status(500).send("Error: "+e)}):a.status(422).json({errors:t.array()})}),app.delete("/api/user/:identity",passport.authenticate("jwt",{session:!1}),async(e,s)=>{await Users.findByIdAndDelete({_id:e.params.identity}).then(a=>{s.status(200).send(e.params.identity+" user was removed from our records.")}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.post("/api/user/favorite/:identity/:add",passport.authenticate("jwt",{session:!1}),async(e,s)=>{await Users.findByIdAndUpdate({_id:e.params.identity},{$addToSet:{Favorite:e.params.add}},{new:!0}).then(a=>{s.status(200).send(e.params.add+" film id being added to favorites.")}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})}),app.delete("/api/user/favorite/:identity/:remove",passport.authenticate("jwt",{session:!1}),async(e,s)=>{await Users.findByIdAndUpdate({_id:e.params.identity},{$pull:{Favorite:e.params.remove}},{new:!0}).then(a=>{s.status(200).send(e.params.remove+" favorite film id deleted.")}).catch(e=>{console.error(e),s.status(500).send("Error: "+e)})});let logwebpage=(e,s,a)=>{console.log(e.url),a()},requestTime=(e,s,a)=>{e.requestTime=Date.now(),a()};app.use(logwebpage),app.use(requestTime);const port=process.env.PORT||8080;app.listen(port,"0.0.0.0",()=>{console.log("Listening on Port "+port)});