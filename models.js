const mongoose=require("mongoose"),bcrypt=require("bcrypt");let movieSchema=mongoose.Schema({Title:{type:String,required:[!0,"Title Required"]},Description:{type:String,required:[!0,"Description is Required Field"]},Release:{type:String,required:[!0,"Release Year of movie is required"]},Genre:{Name:{type:String,required:[!0,"Category of Film is Required"]},Description:{type:String,required:[!0,"movie description is Required"]}},Rated:{type:String,required:[!0,"Film needs to have parental guide rating"]},Rating:{type:String,required:!0,min:[0,"Please enter valid rating no less then 0"],max:[100,"Please enter valid rating no more than 100"]},Actors:[String],Director:{Name:{type:String,required:[!0,"Name of Director Required"]},Bio:{type:String,required:[!0,"Bio info on director required"]},Birth:{type:Date,required:[!0,"Birth date of director required"]},Death:{type:Date}},ImagePath:{type:String},Featured:{type:Boolean}}),userSchema=mongoose.Schema({Username:{type:String,required:[!0,"Username required"]},Password:{type:String,required:[!0,"Password required to have account active"]},Email:{email:"TEST@test.com",type:String,required:!0,unique:!0,lowercase:!0,validate:{validator:function(e){return/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(e)},message:"Invalid email address format"}},Birthday:{type:Date,required:[!0,"Birth date required to have account active"]},Favorite:[{type:mongoose.Schema.Types.ObjectId,ref:"Movie"}]});userSchema.statics.hashPassword=e=>bcrypt.hashSync(e,10),userSchema.methods.validatePassword=function(e){return bcrypt.compareSync(e,this.Password)},userSchema.statics.isThisEmailInUse=async function(e){if(!e)throw Error("Invalid Email");try{if(await this.findOne({email:e}),User)return!1;return!0}catch(r){return console.log("error inside isThisEmailInUse method",r.message),!1}};let Movie=mongoose.model("Movie",movieSchema),User=mongoose.model("User",userSchema);module.exports.Movie=Movie,module.exports.User=User;